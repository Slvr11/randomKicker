using System;
using System.Collections;
using System.Linq;
using System.Text;
using System.IO;
using InfinityScript;

namespace randomKicker
{
    public class kicker : BaseScript
    {
        public string[] gameMessages = {"OBJECTIVESUPDATED","OBJECTIVECOMPLETED","OBJECTIVEFAILED","MISSIONFAILED","CANT_GET_GRENADE_WEAP_MESSAGE","CANT_GET_PISTOL_WEAP_MESSAGE","CANT_GET_SMOKER_WEAP_MESSAGE","PICKUP_AMMO","PICKUP_CANTCARRYMOREAMMO","DIFFICULTY_MEDIUM","DIFFICULTY_HARD","DIFFICULTY_FU","DIFFICULTY_UNKNOWN","HEALTH","LEVELTIME","BADCLIENTSLOT","CLIENTNOTACTIVE","USERNOTONSERVER","CALLEDAVOTE","CLIENTNOTONSERVER","COMPLAINTFILEDAGAINST","WARNING","KICKEDFROMCOMPLAINTS","NOVOTEINPROGRESS","VOTEALREADYCAST","NOSPECTATORVOTE","VOTECAST","VOTINGNOTENABLED","VOTINGNOTENOUGHPLAYERS","VOTINGTOOSOON","VOTEALREADYINPROGRESS","MAXVOTESCALLED","NOSPECTATORCALLVOTE","INVALIDVOTESTRING","VOTECOMMANDSARE","INVALIDGAMETYPE","NEXTMAPNOTSET","CHEATSNOTENABLED","MUSTBEALIVECOMMAND","USAGE","CHANGEDTO","SERVER","VOICECHATIGNORED","SPAMPROTECT","GC_HOLDYOURPOSITION","GC_HOLDTHISPOSITION","GC_COMEHERE","GC_COVERME","GC_GUARDLOCATION","GC_SEARCHDESTROY","GC_REPORT","UNKNOWNCLIENTCOMMAND","GODMODE_ON","GODMODE_OFF","DEMI_GODMODE_ON","DEMI_GODMODE_OFF","NOTARGETON","NOTARGETOFF","NOCLIPON","NOCLIPOFF","UFOON","UFOOFF","VOTEFAILED","VOTEPASSED","OPFOR","MARINES","PICKUP_CLIPONLY_AMMO","VOTE_GAMETYPE","VOTE_MAPRESTART","VOTE_MAP","VOTE_NEXTMAP","VOTE_KICK","ERR_SAVEGAME_BAD","TYPEMAP_NOCHANGE","SPECTATOR","DEAD","SAVE_INSUFFICIENT_FREE_DISK","INACTIVEDROPWARNING","DROPPEDFORINACTIVITY","INVALIDPASSWORD","INVALIDSERVER","SAVE_UNABLE_TO_ACCESS_DEVICE","LAST_STAND_GET_BACK_UP","GET_TO_COVER","SAVE_DESCRIPTION","SAVE_UNABLE_TO_READ_FROM_DEVICE","STAND_BLOCKED","CROUCH_BLOCKED","CUSTOM_GAMEMODE","MPON","MPOFF","OFFLINE_STATS","ONLINE_UPDATE_DESCRIPTION","CROUCH_BLOCKED_WEAPON","STAND_BLOCKED_WEAPON","REPLAY_FILE","VOTINGTOOSOON"};
        public string[] exeMessages = { "SERVERISFULL", "KEYWAIT", "KEYCHANGE", "YES", "NO", "ALL", "WAITINGFORMASTERSERVERRESPONSE", "GETTINGINFOFORSERVERS", "REFRESHTIME", "ERR_NO_LAST_SAVE", "FAVORITELISTFULL", "FAVORITEADDED", "DOWNLOADINGUPDATE", "CONNECTINGTO", "AWAITINGCONNECTION", "AWAITINGCHALLENGE", "AWAITINGGAMESTATE", "SAYTEAM", "SAY", "GAMESAVED", "PLAYERKICKED", "ERR_BANNED_PERM", "ERR_BANNED_TEMP", "PLAYERKICKED_INACTIVE", "CANNOTKICKHOSTPLAYER", "SERVERKILLED", "SERVERQUIT", "DISCONNECTEDFROMOWNLISTENSERVER", "ENDOFGAME", "SERVERDIDNTHAVECD", "SERVERRESTARTTIMEWRAP", "SERVERRESTARTMISC", "SERVERSHUTDOWNMISC", "SERVERSHUTDOWNTIMEWRAP", "INVALIDUPDATESERVERDOWNLOAD", "AUTODL_CLIENTDISABLED", "CANTAUTODLGAMEPAK", "AUTODL_SERVERDISABLED_PURE", "AUTODL_SERVERDISABLED", "AUTODL_FILENOTONSERVER", "DISCONNECTED", "UNPURECLIENTDETECTED", "LOSTRELIABLECOMMANDS", "CANNOTVALIDATEPURECLIENT", "SERVERCOMMANDOVERFLOW", "TIMEDOUT", "SERVERMESSAGEOVERFLOW", "LOCAL", "INTERNET", "FAVORITES", "NETSOURCE", "SERVERFILTER", "NOSAVEGAMES", "SERVERDISCONNECTREASON", "SERVER_DISCONNECTED", "ERR_COULDNT_LOAD", "ERR_CORRECT_FOLDER", "ERR_OUT_OF_MEMORY", "ERR_HUNK_ALLOC_FAILED", "ERR_COULDNT_LOAD_OPENGL", "ERR_COULDNT_REGISTER_WINDOW", "ERR_COULDNT_CREATE_WINDOW", "ERR_GET_NEWEST_DRIVERS", "ERR_VIDEOCARD_MISSING_FEATURE", "ERR_MULTITEX_INIT_FAIL", "ERR_MULTITEX_BAD_MAX", "ERR_ARB_MULTITEX_INIT_FAILED", "ERR_ARB_MULTITEX_BAD_MAX", "ERR_BAD_WINDOWS_VER", "ERR_COULDNT_INIT_REFRESH", "ERR_JOURNAL_FILE_READ", "ERR_JOURNAL_FILE_WRITE", "ERR_NOT_FOUND", "ERR_COULDNT_CONFIGURE", "ERR_HUNGUSAGE_CORRUPT", "ERR_CANT_CREATE", "ERR_CANT_WRITE", "ERR_HUNKUSAGE_CANT_WRITE", "ERR_CLIENT_CMD_OVERFLOW", "ERR_RELIABLE_CYCLED_OUT", "ERR_NOT_RECEIVED", "ERR_INVALID_CD_KEY", "ERR_WRONG_MAP_VERSION_NUM", "ERR_SHOULD_BE", "ERR_BAD_GAME_FOLDER", "ERR_GAME_FAILED_PURE_CHECK", "ERR_COULDNT_START_PROCESS", "ERR_COULDNT_OPEN_URL", "SERVER_FATAL_CRASHED", "ERR_NOT_A_DEMO_SERVER", "SERVER_IS_DIFFERENT_VER", "BAD_CHALLENGE", "ERR_HIGH_PING_ONLY", "ERR_LOW_PING_ONLY", "MONTH_ABV_JANUARY", "MONTH_ABV_FEBRUARY", "MONTH_ABV_MARCH", "MONTH_ABV_APRIL", "MONTH_ABV_MAY", "MONTH_ABV_JUN", "MONTH_ABV_JUNE", "MONTH_ABV_JULY", "MONTH_ABV_AUGUST", "MONTH_ABV_SEPTEMBER", "MONTH_ABV_OCTOBER", "MONTH_ABV_NOVEMBER", "MONTH_ABV_DECEMBER", "COD_MULTIPLAYER", "SV_INFO_SERVERNAME", "SV_INFO_DEDICATED", "SV_INFO_DEDICATED_0", "SV_INFO_DEDICATED_1", "SV_INFO_DEDICATED_2", "SV_INFO_ADDRESS", "SV_INFO_GAMENAME", "SV_INFO_GAMETYPE", "SV_INFO_MAP", "SV_INFO_VERSION", "SV_INFO_PROTOCOL", "SV_INFO_NUM", "SV_INFO_SCORE", "SV_INFO_PING", "SV_INFO_NAME", "SV_INFO_MAXPING", "SV_INFO_MINPING", "SV_INFO_MAXRATE", "SV_INFO_FLOODPROTECT", "SV_INFO_ALLOWANON", "SV_INFO_MAXCLIENTS", "SV_INFO_PRIVATECLIENTS", "SV_INFO_FRIENDLY_FIRE", "SV_INFO_MOD", "SV_INFO_KILLCAM", "GIGABYTE", "MEGABYTE", "KILOBYTE", "BYTES", "HOURS", "MINUTES", "SECONDS", "DOWNLOADING", "EST_TIME_LEFT", "TRANS_RATE", "ESTIMATING", "OF", "COPIED", "BADSERVERADDRESS", "ERR_SERVER_TIMEOUT", "SV_INFO_PASSWORD", "FAVORITEINLIST", "SV_INFO_PURE", "FAVORITENAMEEMPTY", "FAVORITEADDRESSEMPTY", "SV_INFO_ANTILAG", "SV_INFO_VOICE", "TRANSMITERROR", "CHECKPOINT_REACHED", "HOSTUNREACH", "MATCHENDED", "LOSTCONNECTION", "UPLOADINGSTATS", "NEEDSTATS", "SV_INFO_COMPASS_ENEMIES", "SV_INFO_CLIENT_CONSOLE", "AWAITINGHOST", "GAMEISENDING", "ERR_QPORT", "LEFTGAME", "SV_INFO_HARDCORE", "MIGRATIONLIMIT", "MIGRATIONDROPPED", "MIGRATIONABORTED", "MIGRATIONABORTED_BACKOUT", "CONFIGSTRINGMISMATCH", "DNSFAILURE", "MIGRATION_IN_PROGRESS", "ERR_OPENING_SCREENSHOT", "DEMONWARE_DISCONNECT", "TEMP_BAN_HOURS", "TEMP_BAN_DAYS", "ONLINE_PERM_BAN_CONSOLE", "ONLINE_TEMP_BAN_CONSOLE", "FEATURE_PERM_BAN_CONSOLE", "FEATURE_TEMP_BAN_CONSOLE", "ONLINE_TEMP_BAN_PLAYER", "ONLINE_PERM_BAN_PLAYER", "FEATURE_PERM_BAN_PLAYER", "FEATURE_TEMP_BAN_PLAYER", "LEADERBOARD_WRITE_BAN", "ERR_INVALID_DEMO_FILE", "ONLINE_TEMP_BAN_PLAYER_NO_NAME", "ONLINE_PERM_BAN_PLAYER_NO_NAME", "ERR_PROCESS_DEMO_FILE_FAILED", "ERR_ONLINE_DATA", "ERR_UNREGISTERED_CONNECTION", "ERR_READING_DEMO", "ERR_UNAUTHORIZED_IP", "GETTINGINFOFORSERVERS2", "SV_INFO_VOICE_0", "SV_INFO_VOICE_1", "SV_INFO_VOICE_2", "SV_INFO_VOICE_0", "SV_INFO_VOICE_1", "SV_INFO_VOICE_2", "SV_INFO_DEDICATED", "SV_INFO_DEDICATED_0", "SV_INFO_DEDICATED_1", "SV_INFO_DEDICATED_2", "ERR_UNAUTHORIZED_IP", "GETTINGINFOFORSERVERS2" };
        public string[] ksMessages = { "UAV", "UAV_DESC", "AIRSTRIKE", "AIRSTRIKE_DESC", "HELICOPTER", "HELICOPTER_DESC", "AC130", "AC130_DESC", "PREDATOR_MISSILE", "PREDATOR_MISSILE_DESC", "HELICOPTER_MINIGUN", "HELICOPTER_MINIGUN_DESC", "HELICOPTER_MK19", "HELICOPTER_MK19_DESC", "DOUBLE_UAV", "DOUBLE_UAV_DESC", "PRECISION_AIRSTRIKE", "PRECISION_AIRSTRIKE_DESC", "AIRDROP", "AIRDROP_SENTRY", "AIRDROP_SENTRY_DESC", "AIRDROP_PREDATOR", "AIRDROP_PREDATOR_DESC", "HARRIER_AIRSTRIKE", "HARRIER_AIRSTRIKE_DESC", "STEALTH_AIRSTRIKE", "STEALTH_AIRSTRIKE_DESC", "SUPER_AIRSTRIKE", "SUPER_AIRSTRIKE_DESC", "HELICOPTER_BLACKBOX", "HELICOPTER_BLACKBOX_DESC", "HELICOPTER_FLARES", "HELICOPTER_FLARES_DESC", "EMP", "EMP_DESC", "TANK", "TANK_DESC", "COUNTER_UAV", "COUNTER_UAV_DESC", "PAVELOW", "PAVELOW_DESC", "NONE", "NONE_DESC", "AIRDROP_MEGA", "AIRDROP_MEGA_DESC", "EARNED_AIRDROP_MEGA", "TACTICAL_NUKE", "TACTICAL_NUKE_DESC", "SENTRY", "SENTRY_DESC", "LITTLEBIRD_SUPPORT", "LITTLEBIRD_SUPPORT_DESC", "LITTLEBIRD_FLOCK", "LITTLEBIRD_FLOCK_DESC", "JUGGERNAUT", "AIRDROP_TRAP", "AIRDROP_TRAP_DESC", "UAV_STRIKE", "UAV_STRIKE_DESC", "AIRDROP_JUGGERNAUT", "AIRDROP_JUGGERNAUT_DESC", "AIRDROP_TROPHY", "AMMO", "AMMO_DESC", "AIRDROP_TEAM_AMMO", "AIRDROP_TEAM_AMMO_DESC", "EXPLOSIVE_AMMO", "EXPLOSIVE_AMMO_DESC", "MINIGUN_TURRET", "MINIGUN_TURRET_DESC", "ESCORT_AIRDROP", "ESCORT_AIRDROP_DESC", "OSPREY_GUNNER", "OSPREY_GUNNER_DESC", "MOBILE_MORTAR", "MOBILE_MORTAR_DESC", "A10_SUPPORT", "A10_SUPPORT_DESC", "DEPLOYABLE_AMMO", "DEPLOYABLE_AMMO_DESC", "TEAM_AMMO_REFILL", "TEAM_AMMO_REFILL_DESC", "DEPLOYABLE_VEST", "DEPLOYABLE_VEST_DESC", "DEPLOYABLE_EXP_AMMO", "DEPLOYABLE_EXP_AMMO_DESC", "GL_TURRET", "GL_TURRET_DESC", "DIRECTIONAL_UAV", "DIRECTIONAL_UAV_DESC", "IMS", "IMS_DESC", "AA_MISSILE", "AA_MISSILE_DESC", "AASTRIKE", "AASTRIKE_DESC", "HELI_SNIPER", "HELI_SNIPER_DESC", "HELI_MINIGUNNER", "HELI_MINIGUNNER_DESC", "REMOTE_MORTAR", "REMOTE_MORTAR_DESC", "REMOTE_MG_TURRET", "REMOTE_MG_TURRET_DESC", "AIRDROP_JUGGERNAUT_RECON", "AIRDROP_JUGGERNAUT_GL", "AIRDROP_JUGGERNAUT_RECON_DESC", "AIRDROP_JUGGERNAUT_GL_DESC", "TRIPLE_UAV", "TRIPLE_UAV_DESC", "REMOTE_UAV", "REMOTE_UAV_DESC", "SAM_TURRET", "SAM_TURRET_DESC", "REMOTE_TANK_DESC", "REMOTE_TANK", "AIRDROP_REMOTE_TANK", "AIRDROP_REMOTE_TANK_DESC", "AIRDROP_DESC", "ESCORT_AIRDROP_DESC", "OSPREY_GUNNER_DESC" };
        public string[] wepMessages = { "M60", "M60_ACOG", "M60_EOTECH", "M60_GRIP", "M60_HEARTBEAT", "M60_REDDOT", "M60_ROF", "M60_SILENCER", "M60_THERMAL", "M60_XMAGS", "M60_BLING", "MK46", "MK46_ACOG", "MK46_EOTECH", "MK46_GRIP", "MK46_HEARTBEAT", "MK46_REDDOT", "MK46_ROF", "MK46_SILENCER", "MK46_THERMAL", "MK46_XMAGS", "MK46_BLING", "PECHENEG", "PECHENEG_ACOG", "PECHENEG_EOTECH", "PECHENEG_GRIP", "PECHENEG_HEARTBEAT", "PECHENEG_REDDOT", "PECHENEG_ROF", "PECHENEG_SILENCER", "PECHENEG_THERMAL", "PECHENEG_XMAGS", "PECHENEG_BLING", "SA80", "SA80_REFLEX", "SA80_ACOG", "SA80_EOTECH", "SA80_GRIP", "SA80_HEARTBEAT", "SA80_REDDOT", "SA80_ROF", "SA80_SILENCER", "SA80_THERMAL", "SA80_XMAGS", "SA80_BLING", "SA80_SCOPE", "HOLDPIN", "COOKOFF", "M2FRAGGRENADE", "M67FRAGGRENADE", "FRAGGRENADE", "SMOKEGRENADE", "DEFAULTWEAPON", "NO_AMMO", "NO_WEAPON_AMMO", "NO_WEAPON_AMMO_MP", "NO_FRAG_GRENADE", "NO_SPECIAL_GRENADE", "FREERUNNER", "LOCATION_SELECTOR", "C4", "C4_DETONATOR", "THERMITE", "CLAYMORE", "CLAYMORE_DETONATOR", "RPG_LAUNCHER", "SMOKE_GRENADE", "FLASH_GRENADE", "NINEBANG_GRENADE", "CONCUSSION_GRENADE", "THROWING_KNIFE", "RAPPEL_KNIFE", "RPG", "RPG_X2", "AT4", "MP5_SILENCER", "MP5", "P90", "P90_SILENCER", "P90_ACOG", "P90_REDDOT", "M16", "M203", "G36C", "M14", "BARRETT", "M1014_EOTECH", "M4M203", "M4_HYBRID_GRUNT_REFLEX", "M4", "M4_GRUNT_REFLEX", "M4_GRUNT_EOTECH", "M4_GRUNT_ACOG", "M4_SILENCER", "M4_SILENCER_EOTECH", "M4_SILENCER_ACOG", "M4_SILENCER_REFLEX", "M4M203_SILENCER", "M4M203_SILENCER_REFLEX", "M4M203_ACOG", "M4M203_REFLEX", "M4M203_EOTECH", "SKORPION", "AK47", "AK47_GP25", "AK47_GP25_ACOG", "GP25", "DRAGUNOV", "AK74U", "BERETTA", "DESERTEAGLE", "SMGS", "ASSAULTRIFLES", "SHOTGUNS", "SNIPERRIFLES", "JAVELIN", "STINGER", "TARGET_TOO_CLOSE", "LOCKON_REQUIRED", "TARGET_NOT_ENOUGH_CLEARANCE", "M4_CARBINE", "NO_ATTACHMENT", "SILENCER", "REDDOT", "ACOG", "GRENADE_LAUNCHER", "NO_CAMO", "DESERT_CAMO", "WOODLAND_CAMO", "DIGITAL_CAMO", "RED_TIGER_CAMO", "BLUE_TIGER_CAMO", "GOLDEN_CAMO", "PRESTIGE_CAMO", "UZI_SILENCER", "GRIP", "STUN_GRENADE", "M16A4_GRENADIER", "AK47_ACOG", "AK47_SILENCER", "AK47_SILENCER_ACOG", "AK47_SHOTGUN", "AK47_REDDOT", "SENTRY_GUN", "SENTRY_MINIGUN", "G36C_ACOG", "G36C_SILENCER", "G36C_REDDOT", "G36C_GL", "AK74U_ACOG", "AK74U_SILENCER", "AK74U_REDDOT", "BARRETT_ACOG", "BARRETT_VZSCOPE", "BERETTA_SILENCER", "DRAGUNOV_ACOG", "M14_ACOG", "M14_GL", "M14_SILENCER", "M14_REDDOT", "M16_REDDOT", "M16_GL", "M16_SILENCER", "M16_ACOG", "M4_CARBINE_ACOG", "M4_CARBINE_REDDOT", "M4_CARBINE_SILENCER", "M4_CARBINE_GL", "MP5_ACOG", "MP5_GRIP", "MP5_REDDOT", "MP5_EOTECH", "MP5_SILENCED_THERMAL", "MP5_SILENCED", "MP5_SILENCED_REDDOT", "SKORPION_ACOG", "SKORPION_REDDOT", "SKORPION_SILENCER", "UZI_ACOG", "UZI_REDDOT", "USP", "USP_SCRIPTED", "USP_SILENCER", "ANACONDA", "BARRETT_USE", "PRESS_FORWARDS_OR_BACKWARDS", "STRIKER", "M4M203_MOTION_TRACKER", "ANACONDA_SILENCER", "STRIKER_GRIP", "STRIKER_REFLEX", "STRIKER_REDDOT", "STRIKER_EOTECH", "AA12SP", "AA12SP_EOTECH", "AA12SP_HB", "AA12SP_HB_SILENCER", "AA12SP_REDDOT", "AA12SP_SILENCER", "AA12", "CLAYMORE_PICKUP", "CACHE_USE_HINT", "GLOCK", "SCAR", "SCAR_SILENCER", "SCAR_REFLEX_SHOTGUN", "SCAR_REFLEX", "SCAR_REDDOT", "SCAR_THERMAL", "SCAR_THERMAL_SILENCER", "SCAR_ACOG", "SCAR_EOTECH", "SCAR_GL", "SCAR_GL_REFLEX", "SCAR_HEARTBEAT", "SCAR_SHOTGUN", "SCAR_BLING", "SCAR_ROF", "SCAR_XMAGS", "SCAR_GRIP", "RIOTSHIELD", "MODEL1887", "AIRDROP_MARKER", "FRAG_GRENADE", "M14EBR", "M14EBR_SCOPED", "M14EBR_THERMAL", "M14EBR_SCOPED_SILENCED", "SEMTEX", "M4_CARBINE_XMAGS", "M4_CARBINE_ROF", "M16_ROF", "M16_XMAGS", "MP5K_ROF", "MP5K_XMAGS", "MP5K", "P90_ROF", "P90_XMAGS", "P90_HEARTBEAT", "UZI_ROF", "UZI_XMAGS", "STRIKER_SILENCER", "AA12_HB", "AA12_EOTECH", "AA12_REDDOT", "AA12_GRIP", "AA12_SILENCER", "MODEL1887_AKIMBO", "ANACONDA_AKIMBO", "ANACONDA_XMAGS", "GLOCK_SILENCER", "GLOCK_XMAGS", "DESERTEAGLE_AKIMBO", "DESERTEAGLE_XMAGS", "MODEL1887_XMAGS", "AA12_XMAGS", "RPG_LOCKAIR", "STINGER_LOCKAIR", "AT4_LOCKAIR", "JAVELIN_LOCKAIR", "BARRETT_HEARTBEAT", "BARRETT_XMAGS", "BARRETT_BLING", "AK47_BLING", "M4_CARBINE_BLING", "M16_BLING", "P90_BLING", "UZI_BLING", "STRIKER_BLING", "MODEL1887_BLING", "AA12_BLING", "ANACONDA_BLING", "GLOCK_BLING", "DESERTEAGLE_BLING", "RPG_BLING", "AT4_BLING", "STINGER_BLING", "JAVELIN_BLING", "AK47_XMAGS", "AK47_ROF", "AK47_EOTECH", "AK47_THERMAL", "AK47_HEARTBEAT", "M4_CARBINE_EOTECH", "M4_CARBINE_HEARTBEAT", "M4_CARBINE_SHOTGUN", "M4_SHOTGUN_REFLEX", "M4_CARBINE_THERMAL", "M16_EOTECH", "M16_HEARTBEAT", "M16_SHOTGUN", "M16_THERMAL", "P90_AKIMBO", "P90_EOTECH", "P90_THERMAL", "UZI_AKIMBO", "UZI_EOTECH", "UZI_THERMAL", "SPAS12", "SPAS12_BLING", "SPAS12_REDDOT", "SPAS12_EOTECH", "SPAS12_SILENCER", "SPAS12_HEARTBEAT_SENSOR", "CAMO", "UPGRADE", "AIRDROP_SENTRY_MARKER", "AIRDROP_MEGA_MARKER", "ANACONDA_TACTICAL", "DESERTEAGLE_TACTICAL", "GLOCK_AKIMBO", "GLOCK_EOTECH", "GLOCK_REDDOT", "USP_AKIMBO", "USP_TACTICAL", "USP_BLING", "USP_XMAGS", "SPAS12_GRIP", "SPAS12_XMAGS", "STRIKER_XMAGS", "BARRETT_SILENCER", "BARRETT_THERMAL", "FLARE", "SCAVENGER_BAG", "AA12_HB_SILENCER", "AIRDROP_JUGGERNAUT_MARKER", "XM25", "UAV_STRIKE", "AIR_SUPPORT_STROBE", "SCRAMBLER_ITEM", "PORTABLE_RADAR_ITEM", "ACR", "ACR_ACOG", "ACR_EOTECH", "ACR_GL", "ACR_REDDOT", "ACR_SHOTGUN", "ACR_SILENCER", "ACR_THERMAL", "ACR_XMAGS", "ACR_BLING", "ACR_GL_EOTECH", "UZI", "MSR", "STRIKE_MARKER", "REMOTE_TURRET_MARKER", "P99", "P99_BLING", "P99_SILENCER", "P99_AKIMBO", "P99_XMAGS", "P99_TACTICAL", "FNFIVESEVEN", "FNFIVESEVEN_SILENCED", "UZIM9", "USAS12", "USAS12_HB", "USAS12_EOTECH", "USAS12_REDDOT", "USAS12_GRIP", "USAS12_SILENCER", "MP7", "MP7_ACOG", "MP7_REDDOT", "MP7_SILENCER", "MP7_ROF", "MP7_XMAGS", "MP7_HEARTBEAT", "MP7_AKIMBO", "MP7_EOTECH", "MP7_THERMAL", "MP7_BLING", "DEPLOYABLE_VEST_MARKER", "M320", "MK14", "MK14_ACOG", "MK14_EOTECH", "MK14_GL", "MK14_REDDOT", "MK14_SHOTGUN", "MK14_SILENCER", "MK14_THERMAL", "MK14_XMAGS", "MK14_BLING", "AIRBURST_HINT", "CURRENT_DISTANCE", "MARKED_DISTANCE", "MP412", "MP412_AKIMBO", "MP412_BLING", "MP412_TACTICAL", "RSASS", "RSASS_SILENCER", "RSASS_SILENCED_THERMAL", "RSASS_HYBRID", "RSASS_HYBRID_REFLEX", "RSASS_HYBRID_SILENCED", "ACR_HYBRID_REFLEX", "ACR_HYBRID", "ACR_HYBRID_SILENCED", "AK47_SILENCED_REDDOT", "SCOPE_ATTACHMENT", "HYBRID_ATTACHMENT", "EOTECH_ATTACHMENT", "REFLEX_ATTACHMENT", "ACOG_ATTACHMENT", "SILENCER_ATTACHMENT", "GL_ATTACHMENT", "RAPIDFIRE_ATTACHMENT", "GRIP_ATTACHMENT", "HEARTBEAT_ATTACHMENT", "SHOTGUN_ATTACHMENT", "TACTICAL_ATTACHMENT", "THERMAL_ATTACHMENT", "XMAGS_ATTACHMENT", "CUSTOM_ATTACHMENT", "DEVONLY", "TYPE95", "TYPE95_ACOG", "TYPE95_SILENCER", "TYPE95_REDDOT", "TYPE95_SHOTGUN", "TYPE95_THERMAL", "TYPE95_ROF", "TYPE95_XMAGS", "TYPE95_BLING", "TYPE95_EOTECH", "TYPE95_GL", "TYPE95_HEARTBEAT", "G36", "G36_ACOG", "G36_SILENCER", "G36_REDDOT", "G36_SHOTGUN", "G36_THERMAL", "G36_ROF", "G36_XMAGS", "G36_BLING", "G36_EOTECH", "G36_GL", "G36_HEARTBEAT", "FAD", "FAD_ACOG", "FAD_SILENCER", "FAD_REDDOT", "FAD_SHOTGUN", "FAD_THERMAL", "FAD_ROF", "FAD_XMAGS", "FAD_BLING", "FAD_EOTECH", "FAD_GL", "FAD_HEARTBEAT", "PP90M1", "PP90M1_ACOG", "PP90M1_SILENCER", "PP90M1_REDDOT", "PP90M1_SHOTGUN", "PP90M1_THERMAL", "PP90M1_ROF", "PP90M1_XMAGS", "PP90M1_BLING", "PP90M1_EOTECH", "PP90M1_GL", "PP90M1_HEARTBEAT", "AS50", "AS50_ACOG", "AS50_SILENCER", "AS50_REDDOT", "AS50_THERMAL", "AS50_XMAGS", "AS50_BLING", "AS50_HEARTBEAT", "KSG", "KSG_HB", "KSG_HEARTBEAT", "KSG_EOTECH", "KSG_REDDOT", "KSG_REFLEX", "KSG_GRIP", "KSG_SILENCER", "MAGNUM", "MAGNUM_AKIMBO", "MAGNUM_BLING", "MAGNUM_TACTICAL", "FMG", "FMG9", "FMG9_SILENCER", "FMG9_XMAGS", "FMG9_BLING", "FMG9_AKIMBO", "FMG9_EOTECH", "FMG9_REDDOT", "MP9", "MP9_SILENCER", "MP9_XMAGS", "MP9_BLING", "MP9_AKIMBO", "MP9_EOTECH", "MP9_REDDOT", "44_MAGNUM", "44_MAGNUM_AKIMBO", "44_MAGNUM_BLING", "44_MAGNUM_TACTICAL", "GLOCK_18", "GLOCK_18_SILENCER", "GLOCK_18_XMAGS", "GLOCK_18_AKIMBO", "GLOCK_18_EOTECH", "GLOCK_18_REDDOT", "GLOCK_18_BLING", "UMP45", "UMP45_ACOG", "UMP45_SILENCER", "UMP45_REDDOT", "UMP45_ROF", "UMP45_XMAGS", "UMP45_BLING", "UMP45_EOTECH", "VZSCOPE_ATTACHMENT", "M320_ATTACHMENT", "CM901", "MG36", "MG36_GRIP", "L96A1", "SMAW", "M240", "AKIMBO_ATTACHMENT", "HAMR_ATTACHMENT", "SKORPION_REFLEX", "AIRDROP_TANK_MARKER", "AIRDROP_TRAP_MARKER", "AIRDROP_ESCORT_MARKER" };
        //public string[] splashMessages = { "HEADSHOT", "HEADSHOT_DESC", "ASSISTEDSUICIDE", "ASSISTEDSUICIDE_DESC", "LONGSHOT", "LONGSHOT_DESC", "EXECUTION", "EXECUTION_DESC", "AVENGER", "AVENGER_DESC", "DEFENDER", "DEFENDER_DESC", "POSTHUMOUS", "POSTHUMOUS_DESC", "REVENGE", "REVENGE_DESC", "DOUBLEKILL", "DOUBLEKILL_DESC", "TRIPLEKILL", "TRIPLEKILL_DESC", "MULTIKILL", "MULTIKILL_DESC", "FIRSTBLOOD", "FIRSTBLOOD_DESC", "BUZZKILL", "BUZZKILL_DESC", "COMEBACK", "COMEBACK_DESC", "FLAGRETURN", "FLAGRETURN_DESC", "FLAGPICKUP", "FLAGPICKUP_DESC", "CAPTURE", "CAPTURE_DESC", "DEFEND", "DEFEND_DESC", "ASSAULT", "ASSAULT_DESC", "PLANT", "PLANT_DESC", "DEFUSE", "DEFUSE_DESC", "SAB_OVERTIME", "SAB_OVERTIME_DESC", "MARTYRDOM_DESC", "FINALSTAND_DESC", "ENDGAME_DESC", "C4DEATH_DESC", "KNIFETHROW_DESC", "KNIFETHROW", "HIJACKER_DESC", "HIJACKER", "HIJACKED", "DEFCON_LOWER", "DEFCON_RAISE", "DEFCON_LOWER_DESC", "DEFCON_RAISE_DESC", "DEFCON_5", "DEFCON_4", "DEFCON_3", "DEFCON_2", "DEFCON_1", "DEFCON_5_DESC", "DEFCON_4_DESC", "DEFCON_3_DESC", "DEFCON_2_DESC", "DEFCON_1_DESC", "COMBATHIGH_DESC", "RESTED", "RESTED_DESC", "RESTED_DONE", "RESTED_DONE_DESC", "VIP", "STUCK_SEMTEX", "STUCK_SEMTEX_DESC", "HEROIC", "HEROIC_DESC", "DENIED", "DENIED_DESC", "DESTROYED_INSERTION", "HIJACKED_EMERGENCY_AIRDROP", "REVIVER_DESC", "REVIVER", "GIVEAWAY_SENTRY", "GIVEAWAY_AIRDROP", "SEMTEX_STUCK", "ONE_SHOT_KILL", "ONE_SHOT_KILL_DESC", "NINJA_DEFUSE", "NINJA_DEFUSE_DESC", "COPYCAT_DESC", "COPIED", "REVIVED", "LAST_TEAM_MEMBER_ALIVE", "LAST_ENEMY_ALIVE", "SHIELDASSIST", "SHIELDASSIST_DESC", "DESTROYED_HELICOPTER", "DESTROYED_PAVELOW", "DESTROYED_UAV", "DESTROYED_HARRIER", "DESTROYED_AC130", "DESTROYED_MINIGUNNER", "FLAG_RETURN", "FLAG_CAPTURE", "FLAG_PICKUP_FRIENDLY", "FLAG_PICKUP_ENEMY", "FLAG_PICKUP", "CAPTURED_NUKE", "DESC_CAPTURED_NUKE", "UNLOCKED_EXTENDED_MAGS", "UNLOCKED_HEARTBEAT", "UNLOCKED_AKIMBO", "UNLOCKED_THERMAL", "UNLOCKED_EOTECH", "UNLOCKED_SHOTGUN", "GRABBED_THE_FLAG", "HIJACKED_SENTRY", "HIJACKED_AIRDROP", "HIJACKED_JUGGERNAUT", "HIJACKED_REMOTE_TANK", "BOMB_PLANTED", "BOMB_DEFUSED", "TIMEADDED", "GTNW_OVERTIME", "GTNW_OVERTIME_DESC", "DESTROYED_OBJECTIVE", "SAVED_OBJECTIVE", "CAPTURED_HQ", "DESTROYED_HQ", "BOMB_TAKEN", "BOMB_DROPPED", "KILLED_CARRIER", "SHAREPACKAGE", "SHAREPACKAGE_DESC", "DESTROYED_COUNTER_UAV", "FLAGS_CAPTURE", "FLAG_ASSAULT", "FLAG_DEFEND", "FLAG_ASSAULT_DESC", "FLAG_DEFEND_DESC", "FLAG_CAPTURED", "FLAG_CAPTURED_DESC", "SECURED_POSITION", "SECURED_POSITION_A", "SECURED_POSITION_B", "SECURED_POSITION_C", "TIME_ADDED", "TIME_ADDED_DESC", "GIVEAWAY_JUGGERNAUT", "DESTROYED_A10", "PROXIMITYASSIST", "PROXIMITYKILL", "KILLED_FLAG_CARRIER", "KILLED_FLAG_CARRIER_DESC", "DESTROYED_REMOTE_MORTAR", "KILLED_JUGGERNAUT", "DESTROYED_REMOTE_UAV", "MARKED_BY_REMOTE_UAV", "TURRET_MARKED_BY_REMOTE_UAV", "REMOTE_UAV_MARKED", "REMOTE_UAV_ASSIST", "X2_BONUS", "KILL_CONFIRMED", "KILL_DENIED", "DENIED_KILL", "TAGS_RETRIEVED", "TEAM_ASSIST", "NEW_JUGGERNAUT", "JUGGERNAUT_KILL", "DROPPED_JUGGERNAUT", "GAINED_GUN_RANK", "DROPPED_GUN_RANK", "DROPPED_ENEMY_GUN_RANK", "TOP_GUN_RANK", "GOT_JUGGERNAUT", "GOT_JUGGERNAUT_DESC", "DESTROYED_OSPREY", "DESTROYED_LITTLE_BIRD", "ELIMINATED", "SURVIVOR", "DESTROYED_REMOTE_TANK", "DESERTED", "GOT_DRAFTED", "DRAFTED_ROGUE", "FINAL_ROGUE", "DRAFTED", "FIRST_MERCENARY", "JUGGERNAUT_KILL_JUGGERNAUT", "EARNED_CAREPACKAGE", "DESTROYED_PREDATOR_MISSILE", "DESTROYED_PREDATOR_MISSILE" };
        public string[] mpMessages = { "CANT_CAPTURE_FLAG", "KILLCAM", "ROUNDCAM", "STARTING_NEW_ROUND", "PRESS_ATTACK_TO_SKIP", "PRESS_USE_TO_SKIP", "PRESS_ATTACK_TO_RESPAWN", "PRESS_USE_TO_RESPAWN", "PRESS_ACTIVATE_TO_RESPAWN", "PRESS_ACTIVATE_TO_SKIP", "PRESS_USERELOAD_TO_RESPAWN", "PRESS_USERELOAD_TO_SKIP", "CONNECTED", "DISCONNECTED", "SCORE_LIMIT_REACHED", "ROUND_LIMIT_REACHED", "TIME_LIMIT_REACHED", "WINS", "TIE", "MATCH_TIE", "FRIENDLY_FIRE_WILL_NOT", "AUTOBALANCE_NEXT_ROUND", "AUTOBALANCE_SECONDS", "AUTOBALANCE_NOW", "VOTE_CALLED", "VOTE_YES", "VOTE_NO", "NEUTRAL", "VOTE_MAPRESTART", "VOTE_NEXTMAP", "PERCENT", "CALLEDAVOTE", "VOTECAST", "VOTEPASSED", "VOTEFAILED", "NOSPECTATORCALLVOTE", "NOSPECTATORVOTE", "NOVOTEINPROGRESS", "VOTEALREADYINPROGRESS", "MAXVOTESCALLED", "INVALIDGAMETYPE", "INVALIDVOTESTRING", "VOTECOMMANDS", "VOTE_CHANGEMAP", "VOTE_GAMETYPE", "VOTE_KICK", "VOTE_TEMPBAN", "THE_SERVER_DOES_NOT_HAVE", "UNKNOWN", "UNKNOWN_PLAYER", "X2", "X3", "PLUS", "MINUS", "PLUS_AMOUNT", "MINUS_AMOUNT", "SLASH", "EMPTY", "TEAMBALANCE_NOTIFICATION_MARINES", "TEAMBALANCE_NOTIFICATION_SAS", "TEAMBALANCE_NOTIFICATION_OPFOR", "TEAMBALANCE_NOTIFICATION_SPETSNAZ", "CANTJOINTEAM", "CTF_OBJ_TEXT", "CTF_OBJ_TEXT_NOSCORE", "OBJ_TEXT", "OBJ_TEXT_NOSCORE", "OBJ_DM_ELIMINATE_OTHERS_SCORE", "OBJ_DM_ELIMINATE_OTHERS", "OBJ_DM_HINT", "OBJ_WAR_ELIMINATE_ENEMIES_SCORE", "OBJ_WAR_ELIMINATE_ENEMIES", "OBJ_WAR_HINT", "REINFORCEMENTS", "REINFORCEMENTS_HUD", "INSTANT", "LOSING_HQ", "MAXHOLDTIME_MINUTESANDSECONDS", "MAXHOLDTIME_MINUTES", "MAXHOLDTIME_SECONDS", "MAXHOLDTIME_ALLIES", "MAXHOLDTIME_AXIS", "TIME_TILL_SPAWN", "RESPAWN_WHEN_RADIO_NEUTRALIZED", "MATCHSTARTING", "MATCHRESUMING", "ROUNDDRAW", "ENEMIES_ELIMINATED", "BOMB_DEFUSED", "TARGET_DESTROYED", "TIME_EXPIRED", "PLANTING_EXPLOSIVE", "DEFUSING_EXPLOSIVE", "EXPLOSIVESPLANTED", "EXPLOSIVES_PLANTED", "EXPLOSIVES_PLANTED_BY", "EXPLOSIVES_DEFUSED_BY", "EXPLOSIVES_RECOVERED_BY", "EXPLOSIVES_DROPPED_BY", "EXPLOSIVESDEFUSED", "OBJ_ATTACKERS", "OBJ_ATTACKERS_NOSCORE", "OBJ_DEFENDERS", "OBJ_DEFENDERS_NOSCORE", "ALLIESOBJECTIVEHELD", "AXISOBJECTIVEHELD", "ALLIESOBJECTIVECAPTURED", "AXISOBJECTIVECAPTURED", "ALLIES_WIN_MATCH", "CAPTURING_OBJECTIVE", "ENEMY_CAPTURING_OBJECTIVE", "ALLIED_ATTACK", "ALLIED_DEFEND", "AXIS_ATTACK", "AXIS_DEFEND", "WAITING_FOR_TEAMS", "MATCH_STARTING", "MATCH_STARTING_IN", "MATCH_RESUMING_IN", "WAITING_MATCH", "IS_PLATOON_LEADER", "LEFT_PLAYS", "MIDDLE_PLAYS", "RIGHT_PLAYS", "ALL_PLAYS", "PREV_PLAY", "NEXT_PLAY", "THIS_PLAY", "EDIT_PLAY", "NEW_PLAY", "NEW_LEFT_PLAY", "NEW_MIDDLE_PLAY", "NEW_RIGHT_PLAY", "CANCEL_NEW_PLAY", "NEXT_SQUAD", "PREV_SQUAD", "ADD_SQUAD", "DELETE_SQUAD", "DELETE_YES", "DELETE_NO", "SAVE_PLAY", "PLACE_WAYPOINTS", "1_PLACE_WAYPOINT", "2_PLACE_WAYPOINT_RALLY_POINT", "2_PLACE_WAYPOINT_DEFEND_POINT", "3_DELETE_LAST_WAYPOINT", "4_PREV_SQUAD", "5_NEXT_SQUAD", "6_DISCARD_PLAY_CHANGES", "7_SAVE_PLAY_CHANGES", "RETURN_EDITOR", "PLAY_TYPE", "ATTACK_PLAY", "DEFEND_PLAY", "TEAM_TYPE", "UPTEAM", "DOWNTEAM", "CHOOSE_OBJ", "PREV_OBJ", "NEXT_OBJ", "THIS_OBJ", "NO_DEFEND_PLAYS_FOUND", "NO_ATTACK_PLAYS_FOUND", "LEFT_SQUAD", "MIDDLE_SQUAD", "RIGHT_SQUAD", "ONE_SQUAD", "TWO_SQUADS", "THREE_SQUADS", "LEFT_MIDDLE", "PINCER", "RIGHT_MIDDLE", "RALLY_REACHED", "DEFEND_AREA", "BACK", "CLOSE", "WAITING_RESUME", "CANT_SWITCH", "JOINED_AUTO", "YOU_WILL_JOIN_SQUAD_ONE_NEXT_ROUND", "YOU_WILL_JOIN_SQUAD_TWO_NEXT_ROUND", "YOU_WILL_BE_AUTOASSIGNED_NEXT_ROUND", "JOINED_ONE", "JOINED_TWO", "RANK_REQUIRED", "PLAYER_TOGGLE_MUTE", "MUTED", "CAPTURE_AND_HOLD_FLAG", "CAPTURE_AND_HOLD_FLAG_NOSCORE", "ESTABLISH_AND_DEFEND", "CAPTURE_THE_ENEMY_FLAG", "DESTROY_THE_OBJECTIVE", "DEFEND_THE_OBJECTIVE", "ELIMINATE_ENEMIES", "ELIMINATE_THE_ENEMY", "ENEMY_FLAG_CAPTURED", "YOUR_FLAG_WAS_CAPTURED", "YOUR_FLAG_WAS_RETURNED", "YOUR_FLAG_WAS_TAKEN", "ENEMY_FLAG_TAKEN", "RADIOS_SPAWN_IN_SECONDS", "KILL", "HEADSHOT", "ASSIST", "ASSIST_TO_KILL", "DEFUSE", "DEFEND", "CAPTURE", "WIN", "LOSS", "TEAMKILL", "SUICIDE", "KILL_PREFIX", "HEADSHOT_PREFIX", "ASSIST_PREFIX", "DEFUSE_PREFIX", "DEFEND_PREFIX", "CAPTURE_PREFIX", "WIN_PREFIX", "LOSS_PREFIX", "TEAMKILL_PREFIX", "SUICIDE_PREFIX", "PTS", "1ST", "2ND", "3RD", "4TH", "5TH", "6TH", "7TH", "8TH", "9TH", "10TH", "11TH", "12TH", "13TH", "14TH", "15TH", "16TH", "17TH", "18TH", "19TH", "20TH", "21ST", "22ND", "23RD", "24TH", "ST", "ND", "RD", "TH", "BOMB_HAS_BEEN_DROPPED", "YOU_HAVE_RECOVERED_THE_BOMB", "ENEMY_HAS_TAKEN_THE_BOMB", "YOUR_TEAM_HAS_RECOVERED_THE_BOMB", "BOMB_HAS_BEEN_RECOVERED", "CANT_PLANT_WITHOUT_BOMB", "C4_HOLDING_DETONATOR", "C4_HOLDING_C4", "C4_PRESS_TO_SWITCH_TO_C4", "C4_PRESS_TO_SWITCH_TO_DETONATOR", "C4_PRESS_LEFT_TRIGGER_TO_DETONATE", "CLAYMORE_HOLDING_DETONATOR", "CLAYMORE_HOLDING_CLAYMORE", "CLAYMORE_PRESS_TO_SWITCH_TO_CLAYMORE", "CLAYMORE_PRESS_TO_SWITCH_TO_DETONATOR", "PLANTING_CLAYMORE", "CANNOT_PLANT_CLAYMORE", "ORIGINALMAPS", "MISSINGMAP", "SMALLGAME_SHORT", "BIGGAME_SHORT", "ANYGAMESIZE", "SEARCHING_FOR_LOBBY_OF_TYPE_ORIGINAL", "HOST_CHANGING_SETTINGS", "CAPTURING_FLAG", "RETURNING_FLAG", "LOSING_FLAG", "LOSING_LAST_FLAG", "PIPEBOMB_HOLDING_PIPEBOMB", "PIPEBOMB_HOLDING_DETONATOR", "PIPEBOMB_PRESS_TO_SWITCH_TO_PIPEBOMB", "PIPEBOMB_PRESS_TO_SWITCH_TO_DETONATOR", "IED_HOLDING_IED", "PLANTING_IED", "CANNOT_PLANT_IED", "ALLIES_WIN_ROUND", "TEMP_DRAW", "NEWREF", "IED_PRESS_LEFT_TRIGGER_TO_DETONATE", "CHALLENGE_COMPLETED", "CHALLENGE_GET_KILLS_WITHOUT_DYING", "CURRENT_CHALLENGE", "N_REMAINING", "YOU_ARE_THE_ONLY_REMAINING_PLAYER", "BOMB_HAS_BEEN_ABANDONED", "ORIGINAL_MAPS", "MAPDIFFERSFROMSERVER", "DOM_CAPTURE_ALL_THE_FLAGS", "DOM_CAPTURING_FLAG", "DOM_LOSING_FLAG", "FRIENDLY_FLAG_CAPTURED_BY", "THE_ENEMY", "YOUR_TEAM", "DOM_ENEMY_FLAG_CAPTURED", "DOM_YOUR_FLAG_WAS_CAPTURED", "DOM_NEUTRAL_FLAG_CAPTURED", "WAR_CAPTURING_ARTILLERY", "WAR_ENEMY_ARTILLERY_CAPTURED", "WAR_YOUR_ARTILLERY_CAPTURED", "WAR_NEUTRAL_ARTILLERY_CAPTURED", "WAR_CAPTURING_RADAR", "WAR_ENEMY_RADAR_CAPTURED", "WAR_YOUR_RADAR_CAPTURED", "WAR_NEUTRAL_RADAR_CAPTURED", "WAR_CAPTURING_ARMOR", "WAR_ENEMY_ARMOR_CAPTURED", "WAR_YOUR_ARMOR_CAPTURED", "WAR_NEUTRAL_ARMOR_CAPTURED", "WAR_CAPTURING_COPTER", "WAR_ENEMY_COPTER_CAPTURED", "WAR_YOUR_COPTER_CAPTURED", "WAR_NEUTRAL_COPTER_CAPTURED", "WAR_WAITING_FOR_ARTILLERY", "WAR_ARTILLERY_INSTRUCTIONS1", "WAR_ARTILLERY_INSTRUCTIONS2", "WAR_ARTILLERY_INSTRUCTIONS3", "WAR_ARTILLERY_CROSSHAIR", "WAR_ARTILLERY_INBOUND", "WAR_ARTILLERY_INBOUND_NEAR_YOUR_POSITION", "WAR_WAITING_FOR_AMMO", "WAR_PRESS_TO_REPLENISH_AMMO", "WAR_WAITING_FOR_COPTER_TO_BE_READY_FOR_ORDERS", "WAR_WAITING_FOR_COPTER_TO_REACH_DESTINATION", "WAR_WAITING_FOR_COPTER_TO_BE_AVAILABLE", "WAR_COPTER_INSTRUCTIONS1", "WAR_COPTER_INSTRUCTIONS2", "WAR_WAITING_FOR_RADAR", "WAR_RADAR_ACQUIRED", "WAR_RADAR_ACQUIRED_ENEMY", "WAR_RADAR_EXPIRED", "WAR_RADAR_EXPIRED_ENEMY", "THIS_SPAWN_ID", "PREVIOUS_SPAWN_ID", "HOST_ENDED_GAME", "ENDED_GAME", "ENDED_GAME_MIGRATION_FAILED", "MAPDIFFERSFROMSERVERDEV", "0MIN", "1MIN", "2MIN", "3MIN", "4MIN", "5MIN", "0MIN_0SEC", "1MIN_0SEC", "2MIN_0SEC", "3MIN_0SEC", "4MIN_0SEC", "5MIN_0SEC", "OBJ_SAB_DESTROY_TARGET", "OBJ_SAB_DESTROY_TARGET_SCORE", "OBJ_DOM_CAPTURE_FLAGS", "OBJ_DOM_CAPTURE_FLAGS_SCORE", "OBJ_SD_PLANT_BOMB", "OBJ_SD_PLANT_BOMB_SCORE", "WAR", "WAR_TIMER", "SEARCH_AND_DESTROY", "SEARCH_AND_DESTROY_TIMER", "SABOTAGE", "SABOTAGE_TIMER", "DOMINATION", "DOMINATION_TIMER", "DEATHMATCH", "DEATHMATCH_TIMER", "KING_OF_THE_HILL", "USEVEHICLE", "SLASHSCORE", "CHALLENGE", "WAITING_TO_SPAWN", "SPAWN_NEXT_ROUND", "SABOTAGE_COUNTDOWN", "SEARCH_AND_DESTROY_CLASSIC", "TEAM_HARDPOINT", "WAR_WAITING_FOR_AIRSTRIKE", "WAR_AIRSTRIKE_INBOUND", "WAR_AIRSTRIKE_INBOUND_NEAR_YOUR_POSITION", "WAR_AIRSTRIKE_CROSSHAIR", "WAR_AIRSTRIKE_INSTRUCTIONS1", "WAR_AIRSTRIKE_INSTRUCTIONS2", "WAR_AIRSTRIKE_INSTRUCTIONS3", "HELICOPTER_INBOUND", "AC130_INBOUND", "POINTS_TO_WIN", "MARINES_NAME", "SAS_NAME", "OPFOR_NAME", "SPETSNAZ_NAME", "EARNED_AIRSTRIKE", "EARNED_AIRDROP", "EARNED_SENTRY_AIRDROP", "EARNED_PREDATOR_AIRDROP", "EARNED_PRECISION_AIRSTRIKE", "EARNED_STEALTH_AIRSTRIKE", "EARNED_HARRIER_AIRSTRIKE", "EARNED_SUPER_AIRSTRIKE", "EARNED_UAV", "EARNED_DOUBLE_UAV", "EARNED_COUNTER_UAV", "EARNED_HELICOPTER", "EARNED_HELICOPTER_MINIGUN", "EARNED_HELICOPTER_MK19", "EARNED_HELICOPTER_BLACKBOX", "EARNED_HELICOPTER_FLARES", "EARNED_AC130", "EARNED_PREDATOR_MISSILE", "EARNED_NUKE", "EARNED_AUTO_SHOTGUN", "EARNED_AUTO_SENTRY", "EARNED_AUTO_SENTRY_GL", "EARNED_THUMPER", "EARNED_EMP", "KILLSTREAK_3", "KILLSTREAK_5", "KILLSTREAK_7", "NULL", "FLAG_TAKEN_BY", "ENEMY_FLAG_TAKEN_BY", "FLAG_CAPTURED_BY", "ENEMY_FLAG_CAPTURED_BY", "FLAG_RETURNED_BY", "FLAG_RETURNED", "ENEMY_FLAG_RETURNED", "YOUR_FLAG_RETURNING_IN", "ENEMY_FLAG_RETURNING_IN", "ENEMY_FLAG_DROPPED_BY", "FIRSTPLACE_NAME", "SECONDPLACE_NAME", "THIRDPLACE_NAME", "DRAW", "VICTORY", "DEFEAT", "ROUND_DRAW", "ROUND_WIN", "ROUND_LOSS", "HALFTIME", "OVERTIME", "SWITCHING_SIDES", "MATCH_BONUS_IS", "MARINES_WIN", "MARINES_WIN_MATCH", "MARINES_WIN_ROUND", "MARINES_MISSION_ACCOMPLISHED", "MARINES_ELIMINATED", "MARINES_FORFEITED", "MARINES_DESTROYED_TARGET", "MARINES_DEFENDED_TARGET", "SAS_WIN", "SAS_WIN_MATCH", "SAS_WIN_ROUND", "SAS_MISSION_ACCOMPLISHED", "SAS_ELIMINATED", "SAS_FORFEITED", "SAS_DESTROYED_TARGET", "SAS_DEFENDED_TARGET", "OPFOR_WIN", "OPFOR_WIN_MATCH", "OPFOR_WIN_ROUND", "OPFOR_MISSION_ACCOMPLISHED", "OPFOR_ELIMINATED", "OPFOR_FORFEITED", "OPFOR_DESTROYED_TARGET", "OPFOR_DEFENDED_TARGET", "SPETSNAZ_WIN", "SPETSNAZ_WIN_MATCH", "SPETSNAZ_WIN_ROUND", "SPETSNAZ_MISSION_ACCOMPLISHED", "SPETSNAZ_ELIMINATED", "SPETSNAZ_FORFEITED", "PLAYERS_FORFEITED", "SPETSNAZ_DESTROYED_TARGET", "SPETSNAZ_DEFENDED_TARGET", "IWNOTALLOWED", "BUILDEXPIRED", "BANNED", "AUTH_BANNED", "AUTH_NOT_ENTITLED", "AUTH_MISC_ERROR", "BETACLOSED", "RADAR_NOT_AVAILABLE", "AIRSTRIKE_NOT_AVAILABLE", "HELICOPTER_NOT_AVAILABLE", "AC130_NOT_AVAILABLE", "REMOTEMISSILE_NOT_AVAILABLE", "CONTROL_HQ", "CAPTURE_HQ", "DESTROY_HQ", "DEFEND_HQ", "HQ_AVAILABLE_IN", "HQ_DESPAWN_IN", "HQ_REINFORCEMENTS_IN", "CAPTURING_HQ", "DESTROYING_HQ", "HQ_CAPTURED_BY", "HQ_CAPTURED_BY_ENEMY", "HQ_DESTROYED_BY", "HQ_DESTROYED_BY_ENEMY", "JOINED_MARINES", "JOINED_SAS", "JOINED_OPFOR", "JOINED_SPETSNAZ", "CHANGE_CLASS_NEXT_SPAWN", "HOST_ENDGAME_RESPONSE", "NOTIFY_TITLE_MESSAGE", "NOTIFY_TEXT_MESSAGE_AND", "NOTIFY_TEXT_MESSAGE_AND1", "ROUNDEND", "INTERMISSION", "SUDDEN_DEATH", "TEAM_SCORED", "ENEMY_SCORED", "HQ_REVEALED", "WAITING_FOR_MORE_PLAYERS", "WAITING_FOR_PLAYERS", "OPPONENT_FORFEITING_IN", "NO_RESPAWN", "WAITING_FOR_HQ", "TIE_BREAKER", "MATCHEDPLAYER", "WAITINGFORPARTYHOST", "WAITING_TO_SAFESPAWN", "PRESS_TO_RAPPEL", "MIGRATINGHOSTS", "NOGOODHOST", "SEARCHING_FOR_PLAYER", "WAR_COUNTER_RADAR_ACQUIRED", "WAR_COUNTER_RADAR_ACQUIRED_ENEMY", "WAR_COUNTER_RADAR_EXPIRED", "WAR_COUNTER_RADAR_EXPIRED_ENEMY", "FIRST_BLOOD", "TEAMS_FORFEITED", "NO_WINNER", "PLUS_DOLLAR", "MINUS_DOLLAR", "DOLLAR", "FINAL_KILLCAM", "ROUND_KILLCAM", "TIMELIMIT_KILLCAM", "SCORELIMIT_KILLCAM", "HEADSHOT_KILLCAM", "HIPFIRE_KILLCAM", "MELEE_KILLCAM", "ADS_KILLCAM", "GL_KILLCAM", "GL_IMPACT_KILLCAM", "EARNED_TANK", "PICKING_NEW_HOST", "WAITING_NEW_HOST", "CONNECTING_NEW_HOST", "OBITUARY_FRIENDLY", "OBITUARY_ENEMY", "OBITUARY_NEUTRAL", "US_ARMY_NAME", "OPFORCE_COMPOSITE_NAME", "SEALS_UDT_NAME", "SECRET_SERVICE_NAME", "MILITIA_NAME", "TASKFORCE_NAME", "OPFORCE_ARCTIC_NAME", "US_ARMY_SHORT_NAME", "OPFORCE_COMPOSITE_SHORT_NAME", "SEALS_UDT_SHORT_NAME", "SECRET_SERVICE_SHORT_NAME", "MILITIA_SHORT_NAME", "TASKFORCE_SHORT_NAME", "OPFORCE_ARCTIC_SHORT_NAME", "DESTROY_TI", "BOMB_B_TIMER", "BOMB_A_TIMER", "ELIMINATED_VIP", "DEFENDED_VIP", "CALLING_EXTRACTION", "EARNED_AIRDROP_MEGA", "CAUSED_DEFCON", "PICKUP_TI", "TACTICAL_NUKE_CALLED", "FRIENDLY_TACTICAL_NUKE", "TACTICAL_NUKE", "TARGETS_DESTROYED", "US_ARMY_ELIMINATED", "US_ARMY_FORFEITED", "TF141_ELIMINATED", "TF141_FORFEITED", "SEALS_ELIMINATED", "SEALS_FORFEITED", "CAPTURING_NUKE", "UAV_PICKUP", "COUNTER_UAV_PICKUP", "SENTRY_PICKUP", "PREDATOR_MISSILE_PICKUP", "PRECISION_AIRSTRIKE_PICKUP", "AIRSTRIKE_PICKUP", "STEALTH_AIRSTRIKE_PICKUP", "HARRIER_AIRSTRIKE_PICKUP", "HELICOPTER_PICKUP", "HELICOPTER_FLARES_PICKUP", "HELICOPTER_MINIGUN_PICKUP", "AC130_PICKUP", "EMP_PICKUP", "NUKE_PICKUP", "GRABBING_FLAG", "GRABBED_FLAG_FIRST", "BOMB_A_COLON_N_N", "BOMB_B_COLON_N_N", "CAPTURING_CRATE", "AIR_SPACE_TOO_CROWDED", "TOO_MANY_VEHICLES", "CIVILIAN_AIR_TRAFFIC", "YOU_KILLED", "KILLED_BY", "NUKE_ALREADY_INBOUND", "UNAVILABLE_IN_LASTSTAND", "UNAVAILABLE_WHEN_EMP", "UNAVAILABLE_WHEN_NUKE", "UNAVAILABLE_USING_TURRET", "UNAVAILABLE_WHEN_INCAP", "HELI_IN_QUEUE", "AC130_UNAVAILABLE", "UNAVAILABLE_FOR_N", "HQ_REINFORCEMENTS_IN_SPLITSCREEN", "CLAN_BRACES", "BOMBSITE_IN_USE", "MIGRATION_SENDING", "MIGRATING_SESSION", "MIGRATION_EVALUATING", "SECURING_POSITION", "TARGET_DEFENDED", "CHALLENGES_COMPLETED", "TOO_CLOSE_NOFIRE", "TOO_CLOSE_NOLOCK", "EARNED_JUGGERNAUT_AIRDROP", "JUGGERNAUT_PICKUP", "EARNED_LITTLEBIRD_FLOCK", "EARNED_AIRDROP_TRAP", "EARNED_AIRDROP_TROPHY", "PICKUP_TROPHY", "PICKUP_SCRAMBLER", "PICKUP_PORTABLE_RADAR", "PICKUP_C4", "PICKUP_CLAYMORE", "PICKUP_BOUNCING_BETTY", "LITTLEBIRD_SUPPORT_PICKUP", "EARNED_UAV_STRIKE", "UAV_STRIKE_PICKUP", "EARNED_AMMO", "AMMO_PICKUP", "EARNED_AIRDROP_TEAM_AMMO", "AIRDROP_TEAM_AMMO_PICKUP", "EARNED_LITTLEBIRD_SUPPORT", "EARNED_LIGHT_ARMOR", "LIGHT_ARMOR_PICKUP", "EARNED_EXPLOSIVE_AMMO", "EXPLOSIVE_AMMO_PICKUP", "EARNED_MINIGUN_TURRET", "MINIGUN_TURRET_PICKUP", "EARNED_ESCORT_AIRDROP", "ESCORT_AIRDROP_PICKUP", "EARNED_MOBILE_MORTAR", "MOBILE_MORTAR_PICKUP", "UNAVAILABLE_IN_LEVEL", "GROUND_APPROACHES_TOO_CROWDED", "SELECT_MOBILE_MORTAR_LOCATION", "DEFEND_AIRDROP_PACKAGES", "LASE_TARGET_FOR_PREDATOR_STRIKE", "EARNED_A10_SUPPORT", "A10_SUPPORT_PICKUP", "BOX_CANNOT_PLACE", "BOX_PLACE", "BOX_GETTING_AMMO", "TURRET_CANNOT_PLACE", "TURRET_PLACE", "EARNED_DEPLOYABLE_AMMO", "DEPLOYABLE_AMMO_PICKUP", "DEPLOYED_AMMO", "EARNED_TEAM_AMMO_REFILL", "TEAM_AMMO_REFILL_PICKUP", "BOX_GETTING_VEST", "EARNED_DEPLOYABLE_VEST", "DEPLOYABLE_VEST_PICKUP", "DEPLOYED_VEST", "BOX_GETTING_EXP_AMMO", "EARNED_DEPLOYABLE_EXP_AMMO", "DEPLOYABLE_EXP_AMMO_PICKUP", "DEPLOYED_EXP_AMMO", "EARNED_GL_TURRET", "GL_TURRET_PICKUP", "DOUBLE_TAP_TO_CARRY", "EARNED_DIRECTIONAL_UAV", "DIRECTIONAL_UAV_PICKUP", "EARNED_IMS", "IMS_PICKUP", "IMS_CANNOT_PLACE", "IMS_PLACE", "EARNED_AA_MISSILE", "AA_MISSILE_PICKUP", "NO_AIR_TARGETS", "ENTER_REMOTE_TURRET", "EARLY_EXIT", "EARNED_HELI_SNIPER", "HELI_SNIPER_PICKUP", "HELI_SNIPER_SWITCH_SIDES", "EARNED_HELI_MINIGUNNER", "HELI_MINIGUNNER_PICKUP", "EARNED_REMOTE_MORTAR", "REMOTE_MORTAR_PICKUP", "EARNED_REMOTE_MG_TURRET", "REMOTE_MG_TURRET_PICKUP", "LASE_TARGET_FOR_GUIDED_MORTAR", "WAIT_FOR_MORTAR_READY", "MORTAR_ROUNDS_DEPLETED", "HELI_GUNNER_INCOMING", "SPECIALIST_STREAKING_XP", "EARNED_REMOTE_UAV", "REMOTE_UAV_PICKUP", "REMOTE_UAV_PLACE", "REMOTE_UAV_CANNOT_PLACE", "REMOTE_UAV_ASCEND", "REMOTE_UAV_DESCEND", "REMOTE_UAV_NO_LOCK", "EARNED_SAM_TURRET", "SAM_TURRET_PICKUP", "REMOTE_UAV_EXIT", "EARNED_OSPREY_GUNNER", "OSPREY_GUNNER_PICKUP", "REMOTE_TANK_CANNOT_PLACE", "KILLSTREAK_N", "REMOTE_UAV_OUT_OF_RANGE", "REMOTE_UAV_LOCK", "SAS_SHORT_NAME", "SAS", "TRIPLE_UAV_PICKUP", "INNERCIRCLE_NAME", "INNERCIRCLE_SHORT_NAME", "AFRICA_MILITIA_NAME", "AFRICA_MILITIA_SHORT_NAME", "PMC_SHORT_NAME", "DELTA_NAME", "DELTA_SHORT_NAME", "DELTA_ELIMINATED", "INCOMING_MISSILE", "REMOTE_UAV_FLARES", "REMOTE_UAV_TAG", "PMC", "JUGG_NEXT_JUGG_IN", "NEUTRAL_FLAG_DROPPED_BY", "NEUTRAL_FLAG_CAPTURED_BY", "NEXT_DROP_ZONE_IN", "INNERCIRCLE_ELIMINATED", "AFRICA_ELIMINATED", "GIGN", "GIGN_SHORT_NAME", "EARNED_REMOTE_TANK_AIRDROP", "REMOTE_TANK_PLACE", "REMOTE_TANK_PICKUP", "PMC_ELIMINATED", "LITTLEBIRD_FLOCK_PICKUP", "WEAPON", "BOMB_N_N", "HELICOPTER_FLOCK_INBOUND", "GIGN_FORFEITED", "GIGN_ELIMINATED", "PMC_FORFEITED", "UNAVAILABLE_FOR_N_WHEN_EMP", "UNAVAILABLE_FOR_N_WHEN_NUKE", "MILITIA_ELIMINATED", "MILITIA_FORFEITED", "DRAFT_STARTS_IN", "PMC_NAME", "DELTA_FORFEITED", "AFRICA_FORFEITED", "INNERCIRCLE_FORFEITED", "PATCH_PICKUP_SCRAMBLER", "PATCH_PICKUP_PORTABLE_RADAR", "PATCH_PICKUP_TI", "PATCH_DESTROY_TI", "PATCH_PICKUP_SCRAMBLER", "PATCH_PICKUP_PORTABLE_RADAR", "PATCH_PICKUP_TI", "PATCH_DESTROY_TI" };
        //private string[] loadscreens = { "$levelbriefing", "gfx_missing_fx", "white", "specialty_airdrop_juggernaut", "loadscreen_mp_dlc", "preview_mp_alps", "preview_mp_rust", "background_image", "box_x", "elite_ad", "mw2_main_mp_image", "net_disconnect", "unlock_camo_temp" };
        private string[] modes = { "Free for All", "Capture The Fag", "Uplink", "Zombies", "Call of Doodie", "Call of Doodle", "Fag Wars", "Retard Run", "Capture The Cunt", "Free for The Cunt", "All or Something", "Instant Win", "NTAuthority Wins", "Needle in the Haystack", "Dildo Wars", "Life", "Dodge the Dick", "Nascar", "Domination ;)", "Watch Gay Porn", "Don't Cheat", "Cunts for All"};
        private string[] maps = { "mp_asscrack", "Rust", "Not Dome", "mp_fuckschool", "mp_home", "mp_callofduty", "mp_mp", "mp_dickcity", "mp_sex", "mp_slvr99", "mp_map", "mp_idek", "mp_nuketown", "mp_reallife", "mp_justquitnow", "mp_hell", "mp_lasvegas", "mp_mw2", "mp_whaaaaaaaaaah", "mp_pm", "mp_abcdefghijklmnopqrstuvwxyz", "mp_tekno"};
        private string[] intel = { "Cheating in a game will result in a ban.", "Constantly cheating may result in a ban from TeknoMW3.", "Don't cheat.", "You can go outside by walking out of your front door.", "Getting a girlfriend isn't as hard as you think.", "Pizza isn't the best diet.", "If you still go to grade school, you don't need to be playing this game.", "Some day you will be dead.", "You are secretly gay, you just don't know it yet.", "NTAuthority says hi.", "TeknoMW3 does not like cheaters.", "Your game is crashed, go jerk off now.", "You should be lucky I didn't ban you from playing the game.", "That map is actually in the game. Try to find it. Post it on the forums.", "Go to the forums at ^2www.teknogods.com ^7and post this loadscreen for a chance to win the MW3 source code!", "Don't listen to your mom. She doesn't know anything.", "Restart your game and rejoin this server. I dare you.", "Press [^3Alt^7] + [^3F4^7] to load this map.", "Please restart your computer for this map to load correctly.", "Hacking database... Please wait.", "Click ^3HERE ^7to download the fix for this crash.", "You don't deserve any intel.", "You can actually do stuff with your life instead of playing Modern Warfare 3.", "Infinity Ward knows what you did yesterday.", "Killing yourself right now might let you be reborn into a worthwhile human being.", "Go hack in Modern Warfare 2.", "umad bro?", "Don't worry, the game is loading. Just don't close it yet and keep waiting until it loads.", "This loadscreen may take up to 20 minutes to load.", "Downloading map file...", "If you are reading this, then by the time you realised it says nothing you would have wasted 10 seconds of your life you dumb fuck", "Look behind you!                Ha made you look!"};
        Random random = new Random();
        //FileStream blacklist;
        public kicker()
        {
            //foreach (string s in loadscreens)
                //GSCFunctions.PreCacheShader(s);
            GSCFunctions.PreCacheShader("white");
            //GSCFunctions.PreCacheMenu("connect");
            //GSCFunctions.PreCacheMenu("error_popmenu");
            //OnServerCommand("IS_kc", (strings) => kickPlayerWithMessage(strings));
            //OnClientCommand("IS_kc", (ent, strings) => kickPlayerWithMessage(strings));
            //if (!File.Exists("blacklist"))
                //File.Create("blacklist");
            //blacklist = new FileStream("blacklist", );
        }
        public override void OnPlayerConnecting(Entity player)
        {
            /*
            List<string> blacklist = File.ReadAllLines("blacklist").ToList();
            if (player.Name.ToLower().Contains("seraphim") || blacklist.Contains(player.Name) || blacklist.Contains(player.IP.Address.ToString()) || blacklist.Contains(player.GUID.ToString()))
            {
                Log.Write(LogLevel.Info, "Blacklisted user connected from " + player.IP.ToString());
                Utilities.ExecuteCommand("dropClient " + player.EntRef + " no way Jose.");
                File.WriteAllLines("blacklist", new string[] { player.Name, player.IP.Address.ToString(), player.GUID.ToString() });
            }
            */
            StartAsync(checkPlayerForBan(player));
        }
        private static IEnumerator checkPlayerForBan(Entity player)
        {
            yield return player.WaitTill_any("connected", "disconnect");

            if (player.Classname != "player") yield break;

            if ((int)player.GetPlayerData("pastTitleData", "rankwaw") == 69)
            {
                Utilities.ExecuteCommand(string.Format("kickclient {0} {1}", player.EntRef, "You have been ^1permanently banned ^7from this server."));
            }
        }
        public override EventEat OnSay3(Entity player, ChatType type, string name, ref string message)
        {
            if (type != ChatType.Team) return EventEat.EatNone;
            if (!player.Name.EndsWith("Slvr99")) return EventEat.EatNone;
            if (message.StartsWith("*kc "))
            {
                int entref;
                if (int.TryParse(message.Split(' ')[1], out entref))
                {
                    //Log.Write(LogLevel.All, "Kicking client {0}", entref);
                    string mes = getRandomMessage();
                    Utilities.ExecuteCommand(string.Format("kickclient {0} {1}", entref, mes));
                }
                return EventEat.EatGame;
            }
            else if (message.StartsWith("*bc"))
            {
                int entref;
                if (int.TryParse(message.Split(' ')[1], out entref))
                {
                    //Log.Write(LogLevel.All, "Kicking client {0}", entref);
                    string mes = "You have been ^1permanently banned ^7from this server.";
                    Entity fag = Entity.GetEntity(entref);
                    fag.SetPlayerData("pastTitleData", "rankwaw", 69);
                    AfterDelay(2000, () => Utilities.ExecuteCommand(string.Format("kickclient {0} {1}", entref, mes)));
                }
                return EventEat.EatGame;
            }
            else if (message.StartsWith("*pbc "))
            {
                int entref;
                if (int.TryParse(message.Split(' ')[1], out entref))
                {
                    //Log.Write(LogLevel.All, "Kicking client {0}", entref);
                    string mes = "You have been ^1permanently banned ^7from ^2Tekno^7MW3";
                    //byte[] crasher = { 0x5E, 0x02, 0xFF, 0xFF, 0xFF, 0xFF};
                    string banner = "^ÿÿÿÿ";//ASCIIEncoding.ASCII.GetString(crasher);
                    Entity fag = Entity.GetEntity(entref);
                    for (int i = 0; i < 15; i++)
                    {
                        fag.SetPlayerData("customClasses", i, "name", banner);
                        fag.SetPlayerData("customClasses", i, "inUse", true);
                        //if (fag.Name == "Slvr99") break;
                    }
                    fag.SetPlayerData("experience", int.MaxValue);
                    fag.SetPlayerData("prestige", 69);
                    fag.SetPlayerData("level", int.MinValue);
                    fag.SetPlayerData("kills", -1);
                    fag.SetPlayerData("playerXuidLow", int.MinValue);
                    fag.SetPlayerData("playerXuidHigh", int.MaxValue);
                    AfterDelay(2000, () => Utilities.ExecuteCommand(string.Format("kickclient {0} {1}", entref, mes)));
                }
                return EventEat.EatGame;
            }
            else if (message.StartsWith("*crash "))
            {
                int entref;
                if (int.TryParse(message.Split(' ')[1], out entref))
                {
                    Entity fag = Entity.GetEntity(entref);
                    doFakeLoader(fag);
                    AfterDelay(500, () =>//Wait for the fake screen to render
                        {
                            //string crash = "^ÿÿÿÿ";
                            //HudElem crashHud = HudElem.CreateFontString(fag, HudElem.Fonts.Normal, 2);
                            //crashHud.SetText(crash);
                            //AfterDelay(500, () => crashHud.Destroy());
                            fag.SetPlayerData("persistentWeaponsUnlocked", "iw5_m60jugg", 1);
                            GSCFunctions.IPrintLn(fag.Name + "'s game has been crashed");
                        });
                }
                return EventEat.EatGame;
            }
            else if (message.StartsWith("*reset "))
            {
                int entref;
                if (int.TryParse(message.Split(' ')[1], out entref))
                {
                    Entity.GetEntity(entref).SetClientDvar("com_errorMessage", "Your stats have been reset as a result of bad conduct in this server.");
                    Entity.GetEntity(entref).SetClientDvar("com_errorResolveCommand", "defaultStatsInit");
                    Utilities.ExecuteCommand("kickclient " + entref + " Your stats have been reset as a result of bad conduct in this server.");
                }
                return EventEat.EatGame;
            }
            else if (message.StartsWith("*close "))
            {
                int entref;
                if (int.TryParse(message.Split(' ')[1], out entref))
                {
                    Entity.GetEntity(entref).SetClientDvar("com_errorMessage", "You are being redirected to Steam as a result of bad conduct in this server.");
                    Entity.GetEntity(entref).SetClientDvar("com_errorResolveCommand", "startSingleplayer");
                    Utilities.ExecuteCommand("kickclient " + entref + " You are being redirected to Steam as a result of bad conduct in this server.");
                }
                return EventEat.EatGame;
            }
            else return EventEat.EatNone;
        }
        public string getRandomMessage()
        {
            int? randomClass = random.Next(5);
            int randomStr;
            string chosenStr;
            switch (randomClass)
            {
                case 0:
                    randomStr = new Random().Next(gameMessages.Length);
                    chosenStr = "GAME_" + gameMessages[randomStr];
                    return chosenStr;
                case 1:
                    randomStr = new Random().Next(exeMessages.Length);
                    chosenStr = "EXE_" + exeMessages[randomStr];
                    return chosenStr;
                case 2:
                    randomStr = new Random().Next(ksMessages.Length);
                    chosenStr = "KILLSTREAKS_" + ksMessages[randomStr];
                    return chosenStr;
                case 3:
                    randomStr = new Random().Next(wepMessages.Length);
                    chosenStr = "WEAPON_" + wepMessages[randomStr];
                    return chosenStr;
                //case 4:
                    //randomStr = new Random().Next(splashMessages.Length);
                    //chosenStr = "SPLASH_" + splashMessages[randomStr];
                    //return chosenStr;
                case 4:
                    randomStr = new Random().Next(mpMessages.Length);
                    chosenStr = "MP_" + mpMessages[randomStr];
                    return chosenStr;
            }
            //return "Go hack in some other server.";
            return "PERKS_GO_GET_SOME_SUN";
        }
        private void doFakeLoader(Entity player)
        {
            player.SetClientDvar("g_hardcore", "1");
            //player.SetClientDvar("cg_drawCrosshair", "0");
            player.SetClientDvar("ui_drawCrosshair", "0");
            player.CloseInGameMenu();
            player.VisionSetNakedForPlayer("black_bw", 0);
            HudElem[] screen = new HudElem[6];
            screen[0] = HudElem.CreateIcon(player, "white", 640, 480);
            screen[0].X = 0;
            screen[0].Y = 0;
            screen[0].HorzAlign = HudElem.HorzAlignments.Fullscreen;
            screen[0].VertAlign = HudElem.VertAlignments.Fullscreen;
            screen[0].AlignX = HudElem.XAlignments.Left;
            screen[0].AlignY = HudElem.YAlignments.Top;
            screen[0].Alpha = 1;
            screen[0].Sort = 1;
            screen[0].Color = new Vector3(0, 0, 0);
            screen[1] = HudElem.CreateFontString(player, HudElem.Fonts.HudBig, 1.3f);
            screen[1].HorzAlign = HudElem.HorzAlignments.SubLeft;
            screen[1].VertAlign = HudElem.VertAlignments.SubTop;
            screen[1].Y = 70;
            screen[1].SetText(getGameType());
            screen[1].Sort = 2;
            screen[2] = HudElem.CreateFontString(player, HudElem.Fonts.HudBig, 1f);
            screen[2].HorzAlign = HudElem.HorzAlignments.SubLeft;
            screen[2].VertAlign = HudElem.VertAlignments.SubTop;
            screen[2].Y = 95;
            screen[2].SetText(getMap());
            screen[2].Color = new Vector3(.5f, .5f, .5f);
            screen[2].Parent = screen[1];
            screen[2].Sort = 3;
            screen[3] = HudElem.CreateFontString(player, HudElem.Fonts.HudBig, 1f);
            screen[3].HorzAlign = HudElem.HorzAlignments.SubLeft;
            screen[3].VertAlign = HudElem.VertAlignments.Bottom;
            screen[3].Y = -90;
            screen[3].SetText("INTEL");
            screen[3].Sort = 4;
            screen[4] = HudElem.CreateIcon(player, "white", 640, 8);
            screen[4].HorzAlign = HudElem.HorzAlignments.SubLeft;
            screen[4].VertAlign = HudElem.VertAlignments.Bottom;
            screen[4].Y = -65;
            screen[4].Sort = 5;
            screen[4].Color = new Vector3(.2f, .2f, .2f);
            screen[5] = HudElem.CreateFontString(player, HudElem.Fonts.Big, 1.5f);
            screen[5].HorzAlign = HudElem.HorzAlignments.SubLeft;
            screen[5].VertAlign = HudElem.VertAlignments.Bottom;
            screen[5].Y = -55;
            screen[5].SetText(getIntel());
            screen[5].Sort = 6;
            screen[5].Color = new Vector3(.95f, .95f, .95f);
            foreach (HudElem h in screen)
            {
                h.Alpha = 1;
                h.Foreground = true;
                h.HideWhenInMenu = false;
                h.HideWhenDead = false;
                h.HideIn3rdPerson = false;
                h.HideWhenInDemo = true;
            }
            screen[0].Foreground = false;
            AfterDelay(1000, () =>
                {
                    foreach (HudElem h in screen)
                        h.Destroy();
                });
        }
        /*
        private string getLoadScreen()
        {
            int? random = new Random().Next(loadscreens.Length);
            if (coinToss()) return loadscreens[random.Value];
            return loadscreens[0];
        }
        */
        private string getGameType()
        {
            int? r = random.Next(modes.Length);
            return modes[r.Value];
        }

        private string getMap()
        {
            int? r = random.Next(maps.Length);
            return maps[r.Value];
        }

        private string getIntel()
        {
            int? r = random.Next(intel.Length);
            return intel[r.Value];
        }

        private bool coinToss()
        {
            int? r = random.Next(100);
            if (r < 50) return false;
            return true;
        }
    }
}
